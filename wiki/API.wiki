#summary API Documentation
#labels Featured

<wiki:toc max_depth="4" />

= API Documentation =

Brief list of available functions, objects, properties and methods

== Built-in functions ==

These are automatically available once you launch v8cgi.

=== Global functions ===
  * `global` - reference to global object
  * `include(module)` - require() other file (see below) and populate global object with resulting exports
  * `require(module)` - includes other module in a way compatible with [https://wiki.mozilla.org/ServerJS/Modules/SecurableModules]. Module's contents are executed within a separate scope; loaded file must register its exports in an `exports` object, which is returned from this call. Module's file is searched according to these rules:
    # absolute module name = file name
    # relative module name starting with a dot = relative to the module currently being executed
    # relative module name NOT starting with a dot = relative to global module directory (set in config file)
    # If the file does not exist, these suffixes are automatically appended and re-tried: `.js`, `.so`, `.dll`;
  * `onexit(func)` - adds `func` as onexit callback
  * `exit()` - terminate execution

=== System functions ===
  * `system.env` - hash with environment variables. Read-only.
  * `system.stdin(count, [binary])` - read `count` bytes from standard input. If `binary == true`, data is returned as an array of numbers. If `count` == 0, data is read until EOF.
  * `system.stdout(data)` - write `data` to standard output. Data can be either string of array of numbers (ascii values).
  * `system.getcwd()` - returns current working directory
  * `system.sleep(num)` - delays execution for `num` seconds
  * `system.args` - array with command-line arguments
  * `system.usleep(num)` - delays execution for `num` microseconds
  * `system.getpid()` - returns current process's ID

== Available modules ==

v8cgi comes with a set of modules which act as code libraries, containing extended functionality, classes, methods and functions.

Modules are represented by files (`.js`, `.so`, `.dll`, `.dylib`) and can be loaded with `require()` or `include()` call.

|| *Module name* || *Summary* || *Module type* || *Documentation* ||
|| active_record || Active Record stuff || js || [API_ActiveRecord] ||
|| assert || CommonJS assertions || js || [API_Assert] ||
|| base64 || Base64 encoding and decoding || js || [API_Base64] ||
|| binary || CommonJS Binary/F Buffer || hybrid || [API_Binary] ||
|| binary-b || CommonJS Binary/D || hybrid || [API_Binary_B] ||
|| dom || DOM, Serializer, Parser  || js || [API_DOM] ||
|| fs || Filesystem access || native || [API_FS] ||
|| gd || GD image manipulation || native || [API_GD] ||
|| getopt || Command line option parsing || js || [API_GetOpt] ||
|| GL || OpenGL || native || [API_GL] ||
|| hash || MD5 and SHA1 || js || [API_Hash] ||
|| html || HTML helpers || js || [API_HTML] ||
|| http || Server/Client Request/Response || js || [API_HTTP] ||
|| js || JS enhancements || js ||[ API_JS] ||
|| jsonRpcHandler || JSON-RPC || js || [API_JsonRpcHandler] ||
|| mysql || MySQL database || native || [API_MySQL] ||
|| memcached || Memcached || native || [API_Memcached] ||
|| mail || Sending email || js || [API_Mail] ||
|| pgsql || PostgreSQL database || native || [API_PostgreSQL] ||
|| process || (sub)process control || native || [API_Process] ||
|| query || SQL query abstraction || js || [API_Query] ||
|| session || HTTP session || js || [API_Session] ||
|| socket || Sockets || native || [API_Socket] ||
|| sqlite || SQLite database || native || [API_SQLite] ||
|| template || Simple templating language || js || [API_Template] ||
|| xdom || (old) Xerces-based DOM || native || [API_XDOM] ||


=== Files ===

Classes: *File*.

  * `var f = new File(fileName)` - creates new file instance
  * `f.open(mode)` - opens the file with a given mode
  * `f.close()` - closes the file
  * `f.read([count], [binary])` - reads `count` (or all) bytes from file.
  * `f.write(data)` - writes `data` to the file
  * `f.rewind()` - rewinds internal pointer to the beginning of file
  * `f.remove()` - deletes the file
  * `f.stat()` - returns object with several stat properties
  * `f.toString()` - returns file name
  * `f.exists()` - tests whether the file exists
  * `f.move(newName)` - renames file to `newName`
  * `f.copy(newName)` - copies file to `newName`, returns copied file object
  * `f.isFile()` - tests whether the path is really a file
  * `var f2 = f.copy(newName)` - copies file to `newName` and returns instance of new file
  * `f.flush()` - flushes any file changes to disk

=== Directories ===

Classes: *Directory*.

  * `var d = new Directory(dirName)` - creates new directory instance
  * `d.create()` - creates new directory
  * `d.listFiles()` - returns an array with names of files contained in the directory
  * `d.listDirectories()` - returns an array with names of directories contained in the directory
  * `d.toString()` - returns directory name
  * `d.exists()` - tests whether the directory exists
  * `d.remove()` - deletes the directory
  * `d.isDirectory()` - tests whether the path is really a directory
  * `d.stat()` - returns object with several stat properties