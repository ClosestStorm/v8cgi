#summary API Documentation
#labels Featured

<wiki:toc max_depth="4" />

= API Documentation =

Brief list of available functions, objects, properties and methods

== Built-in functions ==

These are automatically available once you launch v8cgi.

=== Global functions ===
  * `global` - reference to global object
  * `include(module)` - require() other file (see below) and populate global object with resulting exports
  * `require(module)` - includes other module in a way compatible with [https://wiki.mozilla.org/ServerJS/Modules/SecurableModules]. Module's contents are executed within a separate scope; loaded file must register its exports in an `exports` object, which is returned from this call. Module's file is searched according to these rules:
    # absolute module name = file name
    # relative module name starting with a dot = relative to the module currently being executed
    # relative module name NOT starting with a dot = relative to global module directory (set in config file)
    # If the file does not exist, these suffixes are automatically appended and re-tried: `.js`, `.so`, `.dll`;
  * `onexit(func)` - adds `func` as onexit callback
  * `exit()` - terminate execution

=== System functions ===
  * `system.env` - hash with environment variables. Read-only.
  * `system.stdin(count, [binary])` - read `count` bytes from standard input. If `binary == true`, data is returned as an array of numbers. If `count` == 0, data is read until EOF.
  * `system.stdout(data)` - write `data` to standard output. Data can be either string of array of numbers (ascii values).
  * `system.getcwd()` - returns current working directory
  * `system.sleep(num)` - delays execution for `num` seconds
  * `system.args` - array with command-line arguments
<wiki:comment>
  * `system.usleep(num)` - delays execution for `num` microseconds
</wiki:comment>

=== Files ===

Classes: *File*.

  * `var f = new File(fileName)` - creates new file instance
  * `f.open(mode)` - opens the file with a given mode
  * `f.close()` - closes the file
  * `f.read([count], [binary])` - reads `count` (or all) bytes from file.
  * `f.write(data)` - writes `data` to the file
  * `f.rewind()` - rewinds internal pointer to the beginning of file
  * `f.remove()` - deletes the file
  * `f.stat()` - returns object with several stat properties
  * `f.toString()` - returns file name
  * `f.exists()` - tests whether the file exists
  * `f.move(newName)` - renames file to `newName`
  * `f.copy(newName)` - copies file to `newName`, returns copied file object
  * `f.isFile()` - tests whether the path is really a file
  * `var f2 = f.copy(newName)` - copies file to `newName` and returns instance of new file

=== Directories ===

Classes: *Directory*.

  * `var d = new Directory(dirName)` - creates new directory instance
  * `d.create()` - creates new directory
  * `d.listFiles()` - returns an array with names of files contained in the directory
  * `d.listDirectories()` - returns an array with names of directories contained in the directory
  * `d.toString()` - returns directory name
  * `d.create()` - creates new directory
  * `d.exists()` - tests whether the directory exists
  * `d.remove()` - deletes the directory
  * `d.isDirectory()` - tests whether the path is really a directory
  * `d.stat()` - returns object with several stat properties

== Modules ==

v8cgi comes with a set of modules which act as code libraries, containing extended functionality, classes, methods and functions.

Modules are represented by files (`.js`, `.so`, `.dll`) and can be loaded with `include()` or `require()` call.

=== !ActiveRecord ===
Documented on [API_ActiveRecord separate wikipage].

=== Assert ===
Documented on [API_Assert separate wikipage].

=== GD ===
Documented on [API_GD separate wikipage].

=== !GetOpt ===
Documented on [API_GetOpt separate wikipage].

=== HTML ===
Documented on [API_HTML separate wikipage].

=== HTTP ===
Documented on [API_HTTP separate wikipage].

=== !JavaScript enhancements ===
Documented on [API_JS separate wikipage].

=== JSON RPC Handler ===
Documented on [API_JsonRpcHandler separate wikipage].

=== MySQL ===
Documented on [API_MySQL separate wikipage]

=== Process ===
Documented on [API_Process separate wikipage].

=== Query ===
Documented on [API_Query separate wikipage].

=== Session ===
Documented on [API_Session separate wikipage].

=== Sockets ===
Documented on [API_Socket separate wikipage].

=== SQLite ===
Documented on [API_SQLite separate wikipage].

=== Template ===
Documented on [API_Template separate wikipage].

=== Utility ===
Documented on [API_Util separate wikipage].