#summary API Documentation
#labels Featured

= API Documentation =

Brief list of available functions, objects, properties and methods

== Built-in functions ==

These are automatically available once you launch v8cgi.

=== Global functions ===

  * `global` - reference to global object
  * `include(module)` - require() other file (see below) and populate global object with resulting exports
  * `require(module)` - includes other module in a way compatible with [http://wiki.commonjs.org/wiki/Modules/1.1.1]. Module's contents are executed within a separate scope; loaded file must register its exports in an `exports` object, which is returned from this call. Module's file is searched according to these rules:
    # module name must not contain extension
    # absolute module name = file name
    # relative module name starting with a dot = relative to the module currently being executed
    # relative module name NOT starting with a dot = relative to global module directory (set in config file)
  * `onexit(func)` - adds `func` as onexit callback
  * `exit()` - terminate execution

=== System functions ===
  * `system.env` - hash with environment variables. Read-only.
  * `system.stdin(count)` - read `count` bytes from standard input. The data is returned as an instance of Buffer. If `count` == 0, all available data is read.
  * `system.stdout(data)` - write `data` to standard output. Data can be either string or Buffer.
  * `system.getcwd()` - returns current working directory
  * `system.sleep(num)` - delays execution for `num` seconds
  * `system.args` - array with command-line arguments
  * `system.usleep(num)` - delays execution for `num` microseconds
  * `system.getpid()` - returns current process's ID

== Available modules ==

v8cgi comes with a set of modules which act as code libraries, containing extended functionality, classes, methods and functions.

Modules are represented by files (`.js`, `.so`, `.dll`, `.dylib`) and can be loaded with `require()` or `include()` call.

|| *Module name* || *Summary* || *Module type* || *Documentation* ||
|| active_record || Active Record stuff || js || [API_ActiveRecord] ||
|| assert || CommonJS assertions || js || [API_Assert] ||
|| base64 || Base64 encoding and decoding || js || [API_Base64] ||
|| binary || CommonJS Binary/F Buffer || hybrid || [API_Binary] ||
|| binary-b || CommonJS Binary/D || hybrid || [API_Binary_B] ||
|| dom || DOM, Serializer, Parser  || js || [API_DOM] ||
|| fibers || Fibers || native || [API_Fibers] ||
|| fs || Filesystem access || native || [API_FS] ||
|| gd || GD image manipulation || native || [API_GD] ||
|| getopt || Command line option parsing || js || [API_GetOpt] ||
|| GL || OpenGL || native || [API_GL] ||
|| hash || MD5 and SHA1 || js || [API_Hash] ||
|| html || HTML helpers || js || [API_HTML] ||
|| http || Server/Client Request/Response || js || [API_HTTP] ||
|| js || JS enhancements || js ||[ API_JS] ||
|| jsonRpcHandler || JSON-RPC || js || [API_JsonRpcHandler] ||
|| Jst || JS templates by Mark Gregory Turansky || js ||[ API_Jst] ||
|| mysql || MySQL database || native || [API_MySQL] ||
|| memcached || Memcached || native || [API_Memcached] ||
|| mail || Sending email || js || [API_Mail] ||
|| pgsql || PostgreSQL database || native || [API_PostgreSQL] ||
|| process || (sub)process control || native || [API_Process] ||
|| profiler || V8 profiling || native || [API_Profiler] ||
|| query || SQL query abstraction || js || [API_Query] ||
|| session || HTTP session || js || [API_Session] ||
|| socket || Sockets || native || [API_Socket] ||
|| sprintf || sprintf implementation || js || [API_Sprintf] ||
|| sqlite || SQLite database || native || [API_SQLite] ||
|| template || Simple templating language || js || [API_Template] ||
|| test || CommonJS testing || js || [API_Test] ||
|| tls || SSL/TLS || native || [API_TLS] ||
|| xdom || (old) Xerces-based DOM || native || [API_XDOM] ||
|| zlib || zlib compression || native || [API_Zlib] ||