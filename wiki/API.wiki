#summary API Documentation

= API Documentation =

Brief list of available functions, objects, properties and methods

== Global functions ==
  * `global` - reference to global object
  * `include()` - include script file
  * `exit()` - terminate execution
  * `onexit(func)` - adds `func` as onexit callback

== System functions ==
  * `System.env` - hash with environment variables. Read-only.
  * `System.stdin(count, [binary])` - read `count` bytes from standard input. If `binary == true`, data is returned as an array of numbers. If `count` == 0, one line is read.
  * `System.stdout(data)` - write `data` to standard output. Data can be either string of array of numbers (ascii values).

== Utility functions ==
  * `Util.serialize(val)` - serializes `val` to JSON
  * `Util.unserialize(str)` - unserializes `str` back to JS value
  * `Util.md5(str)` - calculates MD5 hash
  * `Util.sha1(str)` - calculates SHA1 hash

== File functions ==
  * `var f = new File(fileName)` - creates new file instance
  * `f.open(mode)` - opens the file with a given mode
  * `f.close()` - closes the file
  * `f.read([count], [binary])` - reads `count` (or all) bytes from file.
  * `f.write(data)` - writes `data` to the file
  * `f.rewind()` - rewinds internal pointer to the beginning of file
  * `f.remove()` - deletes the file
  * `f.stat()` - returns object with several stat properties
  * `f.toString()` - returns file name
  * `f.exists()` - tests whether the file exists
  * `f.move(newName)` - renames file to `newName`
  * `var f2 = f.copy(newName)` - copies file to `newName` and returns instance of new file

== Directory functions ==
  * `var d = new File(dirName)` - creates new directory instance
  * `d.create()` - creates new directory
  * `d.listFiles()` - returns an array with names of files contained in the directory
  * `d.listDirectories()` - returns an array with names of directories contained in the directory
  * `d.toString()` - returns directory name
  * `d.create()` - creates new directory
  * `d.exists()` - tests whether the directory exists
  * `d.remove()` - deletes the directory
  * `d.stat()` - returns object with several stat properties

== MySQL functions ==
  * `var m = new MySQL()` - creates new mysql instance
  * `m.connect(host, user, password, db)` - connects to database
  * `m.error()` - returns error description
  * `m.errno()` - returns error number
  * `m.affectedRows()` - returns number of rows affected by a query
  * `m.insertId()` - returns ID of last inserted row
  * `m.escape(str)` - escapes a string so it can be used in a query
  * `var r = m.query(query)` - executes a query
  * `r.numRows()` - returns number of rows in query result
  * `r.numFields()` - returns number of fields in query result
  * `r.fetchNames()` - returns an array with field names
  * `r.fetchArrays()` - returns query results as an array of arrays
  * `r.fetchObjects()` - returns query results as an array of hashes

== HTTP functions (in http.js)==

  * `request.get` - hash with GET variables
  * `request.post` - hash with POST variables
  * `request.cookie` - hash with cookie variables
  * `request.method` - HTTP method used (uppercase)
  * `request.files` - hash with uploaded files. Each file has the following properties:
    * `.data` - content
    * `.headers` - hash with headers
    * `.originalName` - file's original name
  * `request.header(headerName)` - returns request HTTP header

  * `response.write(data)` - outputs `data`
  * `response.error(text)` - outputs error `text`
  * `response.header(headers)` - outputs `headers` (hash) as HTTP response headers
  * `response.dump(data)` - recursively outputs `data`
  * `response.escape(data)` - converts *<*, *>*, *&*, *"*, *'* to HTML entities
  * `response.cookie(name, value, expires, path, domain, secure, httponly)` - sets a cookie

  * `session.set(name, value)` - adds a `name`-`value` pair to session
  * `session.get(name)` - retrieves a session variable
  * `session.clear()` - clears all session data
  * `session.save()` - dumps session data to disk; this is done automatically on script exit
  * `session.getId()` - returns current session id
  * `session.setId(id)` - sets a new session id. If `id` is not specified, random one is generated.