#summary API Documentation
#labels Featured

<wiki:toc max_depth="2" />

= API Documentation =

Brief list of available functions, objects, properties and methods

== Global functions ==
  * `global` - reference to global object
  * `include()` - include script file
  * `library()` - include system library (.js/.so/.dll) file
  * `exit()` - terminate execution
  * `onexit(func)` - adds `func` as onexit callback

== System functions ==
  * `System.env` - hash with environment variables. Read-only.
  * `System.stdin(count, [binary])` - read `count` bytes from standard input. If `binary == true`, data is returned as an array of numbers. If `count` == 0, one line is read.
  * `System.stdout(data)` - write `data` to standard output. Data can be either string of array of numbers (ascii values).
  * `System.sleep(num)` - delays execution for `num` seconds
<wiki:comment>
  * `System.usleep(num)` - delays execution for `num` microseconds
</wiki:comment>

== File functions ==
  * `var f = new File(fileName)` - creates new file instance
  * `f.open(mode)` - opens the file with a given mode
  * `f.close()` - closes the file
  * `f.read([count], [binary])` - reads `count` (or all) bytes from file.
  * `f.write(data)` - writes `data` to the file
  * `f.rewind()` - rewinds internal pointer to the beginning of file
  * `f.remove()` - deletes the file
  * `f.stat()` - returns object with several stat properties
  * `f.toString()` - returns file name
  * `f.exists()` - tests whether the file exists
  * `f.move(newName)` - renames file to `newName`
  * `var f2 = f.copy(newName)` - copies file to `newName` and returns instance of new file

== Directory functions ==
  * `var d = new File(dirName)` - creates new directory instance
  * `d.create()` - creates new directory
  * `d.listFiles()` - returns an array with names of files contained in the directory
  * `d.listDirectories()` - returns an array with names of directories contained in the directory
  * `d.toString()` - returns directory name
  * `d.create()` - creates new directory
  * `d.exists()` - tests whether the directory exists
  * `d.remove()` - deletes the directory
  * `d.stat()` - returns object with several stat properties

== MySQL functions ==
  * `var m = new MySQL()` - creates new mysql instance
  * `m.connect(host, user, password, db)` - connects to database
  * `m.error()` - returns error description
  * `m.errno()` - returns error number
  * `m.affectedRows()` - returns number of rows affected by a query
  * `m.insertId()` - returns ID of last inserted row
  * `m.escape(str)` - escapes a string so it can be used in a query

  * `var r = m.query(query)` - executes a query
  * `r.numRows()` - returns number of rows in query result
  * `r.numFields()` - returns number of fields in query result
  * `r.fetchNames()` - returns an array with field names
  * `r.fetchArrays()` - returns query results as an array of arrays
  * `r.fetchObjects()` - returns query results as an array of hashes

== !JavaScript enhancement functions ==

These are defined in library `js.js` and are documented on [API_JS separate wikipage].

== HTTP functions ==

These are defined in library `http.js` and are documented on [API_HTTP separate wikipage].

== Utility functions ==

These are defined in library `util.js` and are documented on [API_Util separate wikipage].

== Template functions ==

These are defined in library `template.js` and are documented on [API_Template separate wikipage].

== SQL Query functions ==

These are defined in library `query.js` and are documented on [API_Query separate wikipage].