#summary API Documentation
#labels Featured

<wiki:toc max_depth="3" />

= API Documentation =

Brief list of available functions, objects, properties and methods

== Built-in functions ==

These are automatically available once you launch v8cgi.

=== Global functions ===
  * `global` - reference to global object
  * `include()` - include script file
  * `library()` - include system library (.js/.so/.dll) file
  * `onexit(func)` - adds `func` as onexit callback
<wiki:comment>
  * `exit()` - terminate execution
</wiki:comment>

=== System functions ===
  * `System.env` - hash with environment variables. Read-only.
  * `System.stdin(count, [binary])` - read `count` bytes from standard input. If `binary == true`, data is returned as an array of numbers. If `count` == 0, one line is read.
  * `System.stdout(data)` - write `data` to standard output. Data can be either string of array of numbers (ascii values).
  * `System.sleep(num)` - delays execution for `num` seconds
<wiki:comment>
  * `System.usleep(num)` - delays execution for `num` microseconds
</wiki:comment>

=== File functions ===

Classes: *File*

  * `var f = new File(fileName)` - creates new file instance
  * `f.open(mode)` - opens the file with a given mode
  * `f.close()` - closes the file
  * `f.read([count], [binary])` - reads `count` (or all) bytes from file.
  * `f.write(data)` - writes `data` to the file
  * `f.rewind()` - rewinds internal pointer to the beginning of file
  * `f.remove()` - deletes the file
  * `f.stat()` - returns object with several stat properties
  * `f.toString()` - returns file name
  * `f.exists()` - tests whether the file exists
  * `f.move(newName)` - renames file to `newName`
  * `var f2 = f.copy(newName)` - copies file to `newName` and returns instance of new file

=== Directory functions ===

Classes: *Directory*

  * `var d = new Directory(dirName)` - creates new directory instance
  * `d.create()` - creates new directory
  * `d.listFiles()` - returns an array with names of files contained in the directory
  * `d.listDirectories()` - returns an array with names of directories contained in the directory
  * `d.toString()` - returns directory name
  * `d.create()` - creates new directory
  * `d.exists()` - tests whether the directory exists
  * `d.remove()` - deletes the directory
  * `d.stat()` - returns object with several stat properties

=== Socket functions ===

Classes: *Socket* 

  * Constants:
    * Socket.PF_INET
    * Socket.PF_INET6
    * Socket.PF_UNIX
    * Socket.SOCK_STREAM
    * Socket.SOCK_DGRAM
    * Socket.SOCK_RAW
    * Socket.IPPROTO_TCP
    * Socket.IPPROTO_UDP
    * Socket.SO_REUSEADDR
    * Socket.SO_BROADCAST
    * Socket.SO_KEEPALIVE

  * `Socket.getProtoByName()` - convert protocol name to number
  * `Socket.getAddrInfo(name, [family])` - convert hostname to address
  * `Socket.getNameInfo(addr, family)` - convert address to cname
  * `Socket.getHostName()` - return current hostname

  * `var sock = new Socket(family, type, proto)` - create new socket
  * `sock.connect(address, [port])` - connect to target `address`
  * `sock.bind(address, [port])` - bind to target `address`
  * `sock.listen([backlog])` - listen for incoming connections
  * `var sock2 = sock.accept()` - accept a new connection
  * `sock.send(data, [address], [port])` - send `data` to socket
  * `sock.receive(num)` - retrieve max `num` bytes from socket
  * `sock.getPeerName()` - returns array with peer address components
  * `sock.getOption(name, [length])` - returns a value of `SO_*` option
  * `sock.setOption(name, value)` - sets a `value` of `SO_*` option
  * `sock.close()` - close a socket

== Loadable functions ==

These are defined in library files (`.js`, `.so`, `.dll`) and can be loaded with `library()` call.

=== MySQL functions  ===

Classes: *MySQL*. Defined in library `libmysql.so` or `mysql.dll`.

  * `var m = new MySQL()` - creates new mysql instance
  * `m.connect(host, user, password, db)` - connects to database
  * `m.error()` - returns error description
  * `m.errno()` - returns error number
  * `m.affectedRows()` - returns number of rows affected by a query
  * `m.insertId()` - returns ID of last inserted row
  * `m.escape(str)` - escapes a string so it can be used in a query

  * `var r = m.query(query)` - executes a query
  * `r.numRows()` - returns number of rows in query result
  * `r.numFields()` - returns number of fields in query result
  * `r.fetchNames()` - returns an array with field names
  * `r.fetchArrays()` - returns query results as an array of arrays
  * `r.fetchObjects()` - returns query results as an array of hashes

=== !JavaScript enhancement functions ===

Defined in library `js.js`,documented on [API_JS separate wikipage].

=== HTTP functions ===

Defined in library `http.js`, documented on [API_HTTP separate wikipage].

=== Session functions ===

Defined in library `session.js`, documented on [API_Session separate wikipage].

=== Utility functions ===

Defined in library `util.js`, documented on [API_Util separate wikipage].

=== Template functions ===

Defined in library `template.js`, documented on [API_Template separate wikipage].

=== SQL Query functions ===

Defined in library `query.js`, documented on [API_Query separate wikipage].