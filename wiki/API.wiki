#summary API Documentation
#labels Featured

<wiki:toc max_depth="4" />

= API Documentation =

Brief list of available functions, objects, properties and methods

== Built-in functions ==

These are automatically available once you launch v8cgi.

=== Global functions ===
  * `global` - reference to global object
  * `include()` - include other file. Four locations are searched for this:
    # current directory for requested file;
    # current directory for requested file with additional suffix `.js`, `.so`, `.dll`;
    # library directory (set in config file) for requested file;
    # library directory for requested file with additional suffix `.js`, `.so`, `.dll`.
  * `require()` - includes other file in a way compatible with [https://wiki.mozilla.org/ServerJS/Modules/SecurableModules]. File contents are executed within a separate scope; loaded file must register its exports in an `exports` object, which is returned from this call.
  * `onexit(func)` - adds `func` as onexit callback
<wiki:comment>
  * `exit()` - terminate execution
</wiki:comment>

=== System functions ===
  * `System.env` - hash with environment variables. Read-only.
  * `System.stdin(count, [binary])` - read `count` bytes from standard input. If `binary == true`, data is returned as an array of numbers. If `count` == 0, data is read until EOF.
  * `System.stdout(data)` - write `data` to standard output. Data can be either string of array of numbers (ascii values).
  * `System.sleep(num)` - delays execution for `num` seconds
<wiki:comment>
  * `System.usleep(num)` - delays execution for `num` microseconds
</wiki:comment>

=== Files ===

Classes: *File*.

  * `var f = new File(fileName)` - creates new file instance
  * `f.open(mode)` - opens the file with a given mode
  * `f.close()` - closes the file
  * `f.read([count], [binary])` - reads `count` (or all) bytes from file.
  * `f.write(data)` - writes `data` to the file
  * `f.rewind()` - rewinds internal pointer to the beginning of file
  * `f.remove()` - deletes the file
  * `f.stat()` - returns object with several stat properties
  * `f.toString()` - returns file name
  * `f.exists()` - tests whether the file exists
  * `f.move(newName)` - renames file to `newName`
  * `f.isFile()` - tests whether the path is really a file
  * `var f2 = f.copy(newName)` - copies file to `newName` and returns instance of new file

=== Directories ===

Classes: *Directory*.

  * `var d = new Directory(dirName)` - creates new directory instance
  * `d.create()` - creates new directory
  * `d.listFiles()` - returns an array with names of files contained in the directory
  * `d.listDirectories()` - returns an array with names of directories contained in the directory
  * `d.toString()` - returns directory name
  * `d.create()` - creates new directory
  * `d.exists()` - tests whether the directory exists
  * `d.remove()` - deletes the directory
  * `d.isdirectory()` - tests whether the path is really a directory
  * `d.stat()` - returns object with several stat properties

=== Sockets ===

Classes: *Socket*.

  * Constants:
    * Socket.PF_INET
    * Socket.PF_INET6
    * Socket.PF_UNIX
    * Socket.SOCK_STREAM
    * Socket.SOCK_DGRAM
    * Socket.SOCK_RAW
    * Socket.IPPROTO_TCP
    * Socket.IPPROTO_UDP
    * Socket.SO_REUSEADDR
    * Socket.SO_BROADCAST
    * Socket.SO_KEEPALIVE

  * `Socket.getProtoByName()` - convert protocol name to number
  * `Socket.getAddrInfo(name, [family])` - convert hostname to address
  * `Socket.getNameInfo(addr, family)` - convert address to cname
  * `Socket.getHostName()` - return current hostname

  * `var sock = new Socket(family, type, proto)` - create new socket
  * `sock.connect(address, [port])` - connect to target `address`
  * `sock.bind(address, [port])` - bind to target `address`
  * `sock.listen([backlog])` - listen for incoming connections
  * `var sock2 = sock.accept()` - accept a new connection
  * `sock.send(data, [address], [port])` - send `data` to socket
  * `sock.receive(num)` - retrieve max `num` bytes from socket
  * `sock.getPeerName()` - returns array with peer address components
  * `sock.getOption(name, [length])` - returns a value of `SO_*` option
  * `sock.setOption(name, value)` - sets a `value` of `SO_*` option
  * `sock.close()` - close a socket

== Modules ==

v8cgi comes with a set of modules which act as code libraries, containing extended functionality, classes, methods and functions.

Modules are represented by files (`.js`, `.so`, `.dll`) and can be loaded with `include()` or `require()` call.

=== MySQL ===
Documented on [API_MySQL separate wikipage]

=== GD ===
Documented on [API_GD separate wikipage].

=== !JavaScript enhancements ===
Documented on [API_JS separate wikipage].

=== HTML ===
Documented on [API_HTML separate wikipage].

=== HTTP ===
Documented on [API_HTTP separate wikipage].

=== Session ===
Documented on [API_Session separate wikipage].

=== Utility ===
Documented on [API_Util separate wikipage].

=== Template ===
Documented on [API_Template separate wikipage].

=== SQL Query ===
Documented on [API_Query separate wikipage].