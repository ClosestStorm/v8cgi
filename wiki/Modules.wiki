#summary Modules writing howto

= Modules =

JS modules in v8cgi closely follow the [http://wiki.commonjs.org/wiki/Modules/1.1 CommonJS Modules specification, version 1.1]. While modules are simple JS libraries, special care should be taken to make them interoperable and correct.

== Module scope ==

Every module is a simple JS file, having a ".js" extension. Even the v8cgi configuration file and the main script file are treated as modules by v8cgi; they are evaluated in the same way as any other module.

How this works: v8cgi wraps the code of a module in an anonymous function, which is then executed. Every module is therefore separated from global scope and from other modules as well.

== Exports ==

Inside a module, there is a free variable `exports`, which is a JS Object. This is the primary and only way for a module to provide some functionality to outside world. Every class, variable and function which is to be used outside of the module must be assigned as a property to the `exports` variable.

== require() ==

Modules are loaded using the `require()` function. This function takes one argument - name of the module being loaded - and returns module's exports.

*NOTE:* exports are cached. Repeated calls to `require()` return always the same object.

Modules can be identified in three distinct ways:
  # *require("./module")* - module names starting with a dot are searched relative to the current module
  # *require("module")* - module names not starting with a dot are searched relative to global search roots, defined in `require.paths`
  # *require("/module")* - absolute module names are treated "as is". This is v8cgi's extension to CommonJS Modules spec.

== Example ==