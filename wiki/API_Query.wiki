#summary Library "query.js"

= SQL Query functions (in query.js)=

  * `var t = new Table(name, database)` - db table with a given `name`; second argument is an instance of `MySQL`
  * `t.addRelation(ownField, foreignTable, foreignField)` - creates a relation to other table
  * `t.select(field, field, ...)` - returns a pre-made SELECT query
  * `t.insert({name:value, name:value, ...})` - returns a pre-made INSERT query
  * `t.update({name:value, name:value, ...})` - returns a pre-made UPDATE query
  * `t.delete()` - returns a pre-made DELETE query

  * `Query.SELECT`, `Query.INSERT`, `Query.UPDATE`, `Query.DELETE` - constants
  * `var q = new Query(type, database)` - creates new query with a given type constant; second argument is an instance of `MySQL`
  * `q.table(table, [type])` - adds a table to query; `type` is a join prefix string (e.g. "LEFT" etc.)
  * `q.join(table, [type])` - alias for `q.table()`
  * `q.field(field, field, ...)` - adds fields to query:
    * `field = "string"` - normal field definition,
    * `field = {name:value, name:value, ...}` - definition for INSERT/UPDATE queries
    * `field = {name:alias, name:alias, ...}` - definition with aliases
  * `q.where(field, operator, value, [mode], [table])` - WHERE clause
  * `q.having(field, operator, value, [mode], [table])` - HAVING clause
  * `q.order(field, [mode], [table])` - ORDER clause
  * `q.limit(count)` - LIMIT clause
  * `q.offset(count)` - OFFSET clause
  * `q.group(field, [table])` - GROUP clause
  * `q.toString()` - creates an SQL string
  * `q.execute()` - executes a query

== Examples ==
{{{
var mysql = new MySQL().connect(HOST, USER, PASSWORD, DB);
var users = new Table("users", mysql);
var articles = new Table("articles", mysql);
articles.addRelation("id_user", users, "id");

var q = users.select("*").toString(); 
/* result: SELECT `users`.* FROM `users` */

var q = users.select("id", "name").toString(); 
/* result: SELECT `users`.`id`, `users`.`name` FROM `users` */

var q = users.select("id", "name")
        .where("id", ">", 6)
        .toString();
/* result: SELECT `users`.`id`, `users`.`name` FROM `users` WHERE `users`.`id` > '6' */

var q = articles.select({"name":"article_name"})
        .join(users)
        .field({"name":"user_name"})
        .order("name", "ASC", articles)
        .limit(10)
        .toString();
/* result: 
    SELECT `articles`.`name` AS 'article_name', `users`.`name` AS 'user_name' 
    FROM `articles` 
    LEFT JOIN `users` ON `articles`.`id_user` = `users`.`id` 
    ORDER BY `articles`.`name` ASC 
    LIMIT 10
*/
}}}